"""import numpy as npimport open3d as o3d# Rastgele 3D Nokta Bulutu Simülasyonu ve Renklendirmedef simulate_point_cloud_with_colors():    # Beyaz araç    car_points = np.random.normal(loc=[0, 0, 1.5], scale=0.2, size=(1000, 3))    car_colors = np.tile([1, 1, 1], (1000, 1))  # Beyaz renk (RGB: 1, 1, 1)    # Yol yüzeyi    road_points = np.random.uniform(low=[-5, -5, 0], high=[5, 5, 0.1], size=(5000, 3))    road_colors = np.tile([0.5, 0.5, 0.5], (5000, 1))  # Gri renk (RGB: 0.5, 0.5, 0.5)    # Sağdaki ağaç    tree_points = np.random.normal(loc=[3, 5, 5], scale=0.5, size=(1000, 3))    tree_colors = np.tile([0, 1, 0], (1000, 1))  # Yeşil renk (RGB: 0, 1, 0)    # Trafik ışığı    light_points = np.random.normal(loc=[-3, -1, 3], scale=0.1, size=(500, 3))    light_colors = np.tile([1, 0, 0], (500, 1))  # Kırmızı renk (RGB: 1, 0, 0)    # Tüm noktaları ve renkleri birleştir    points = np.vstack((car_points, road_points, tree_points, light_points))    colors = np.vstack((car_colors, road_colors, tree_colors, light_colors))    return points, colors# Nokta bulutunu ve renklerini oluşturpoints, colors = simulate_point_cloud_with_colors()# Open3D'de Nokta Bulutu Tanımlapcd = o3d.geometry.PointCloud()pcd.points = o3d.utility.Vector3dVector(points)pcd.colors = o3d.utility.Vector3dVector(colors)  # Renkleri atama# Nokta Bulutunu Görselleştiro3d.visualization.draw_geometries([pcd])"""import torchimport cv2import numpy as npimport open3d as o3d  # Open3D kütüphanesifrom torchvision.transforms import Compose, Resize, ToTensormidas = torch.hub.load("intel-isl/MiDaS", "MiDaS_small")midas.eval()transform = Compose([    Resize((384, 384)),    ToTensor()])image = cv2.imread('0006722.jpg')image = cv2.resize(image, (128, 128))  # Görüntüyü 128x128 piksele küçültimage_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)input_batch = transform(image_rgb).unsqueeze(0)with torch.no_grad():    depth = midas(input_batch)    depth_matrix = depth.squeeze().cpu().numpy()depth_matrix = cv2.normalize(depth_matrix, None, 0, 255, norm_type=cv2.NORM_MINMAX)depth_matrix = np.uint8(depth_matrix)cv2.imshow("Derinlik Matrisi", depth_matrix)cv2.imwrite("midas_depth_matrix.png", depth_matrix)cv2.waitKey(0)cv2.destroyAllWindows()def depth_to_point_cloud(depth_matrix, color_image=None, fx=500, fy=500, cx=None, cy=None):    """    Derinlik matrisini Open3D nokta bulutuna dönüştürür.    :param depth_matrix: Derinlik haritası (matris)    :param color_image: Renkli görüntü (isteğe bağlı)    :param fx, fy: Odak uzaklığı    :param cx, cy: Optik merkezin x ve y koordinatları    :return: Open3D Nokta Bulutu (o3d.geometry.PointCloud)    """    h, w = depth_matrix.shape    if cx is None: cx = w / 2    if cy is None: cy = h / 2    points = []    colors = []    for v in range(h):        for u in range(w):            z = depth_matrix[v, u] / 255.0  # Normalize edilmiş derinlik (0-1)            if z > 0:                x = (u - cx) * z / fx                y = (v - cy) * z / fy                points.append([x, y, z])                if color_image is not None:                    color = color_image[v, u] / 255.0  # RGB rengi (0-1 aralığında)                    colors.append(color)        point_cloud = o3d.geometry.PointCloud()    point_cloud.points = o3d.utility.Vector3dVector(np.array(points))    if color_image is not None:        point_cloud.colors = o3d.utility.Vector3dVector(np.array(colors))    return point_cloudcolor_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)point_cloud = depth_to_point_cloud(depth_matrix, color_image=color_image)o3d.visualization.draw_geometries([point_cloud])